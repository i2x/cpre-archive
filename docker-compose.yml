version: '3.8'

services:
  # Database (Start First)
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"  # รหัสผ่าน root
      MYSQL_DATABASE: "${DATABASE_NAME}"             # ชื่อฐานข้อมูลเริ่มต้น
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend - Development Mode
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: backend-django-dev
    restart: always
    env_file: ./backend/.env
    depends_on:
      - mysql
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__/  # ยกเว้น cache
    networks:
      - app_network
    command: >
      sh -c "until nc -z mysql 3306; do sleep 1; done;
             python manage.py migrate &&
             python manage.py loaddata data.json &&
             python manage.py runserver 0.0.0.0:8000"
    profiles:
      - dev

  # Backend - Production Mode
  backend-prod:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: backend-django-prod
    restart: always
    env_file: ./backend/.env
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - app_network
    volumes:
      - ./backend:/app
    command: >
      sh -c "until nc -z mysql 3306; do sleep 1; done;
             python manage.py migrate &&
             python manage.py loaddata data.json &&
             gunicorn --chdir /app --bind 0.0.0.0:8000 backend.wsgi:application --workers 4 --threads 2 --timeout 120"
    profiles:
      - prod

  # Frontend - Development Mode
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend-dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    networks:
      - app_network
    command: ["npm", "run", "dev", "--", "--host"]
    profiles:
      - dev

  # Frontend - Production Mode
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: frontend-prod
    ports:
      - "80:80"
    restart: always
    networks:
      - app_network
    command: /bin/sh -c "nginx -g 'daemon off;' & sleep 2 && nginx -s reload && wait"
    profiles:
      - prod

volumes:
  mysql_data:

networks:
  app_network:
    driver: bridge
